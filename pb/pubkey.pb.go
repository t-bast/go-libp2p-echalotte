// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/pubkey.proto

package echalotte_pb

import (
	fmt "fmt"
	proto "gx/ipfs/QmdxUuburamoF6zF9qjeQC4WYcWGbWuRmdLacMEsW8ioD8/gogo-protobuf/proto"
	types "gx/ipfs/QmdxUuburamoF6zF9qjeQC4WYcWGbWuRmdLacMEsW8ioD8/gogo-protobuf/types"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// The type of encryption key.
type KeyType int32

const (
	KeyType_Curve25519 KeyType = 0
)

var KeyType_name = map[int32]string{
	0: "Curve25519",
}

var KeyType_value = map[string]int32{
	"Curve25519": 0,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}

func (KeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5f12ca58fa90a3e4, []int{0}
}

// An encryption public key.
type PublicKey struct {
	Type         KeyType          `protobuf:"varint,1,opt,name=type,proto3,enum=echalotte.pb.KeyType" json:"type,omitempty"`
	CreatedAt    *types.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Data         []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	SignatureKey []byte           `protobuf:"bytes,10,opt,name=signature_key,json=signatureKey,proto3" json:"signature_key,omitempty"`
	Signature    []byte           `protobuf:"bytes,11,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *PublicKey) Reset()         { *m = PublicKey{} }
func (m *PublicKey) String() string { return proto.CompactTextString(m) }
func (*PublicKey) ProtoMessage()    {}
func (*PublicKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_5f12ca58fa90a3e4, []int{0}
}
func (m *PublicKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicKey.Merge(m, src)
}
func (m *PublicKey) XXX_Size() int {
	return m.Size()
}
func (m *PublicKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicKey.DiscardUnknown(m)
}

var xxx_messageInfo_PublicKey proto.InternalMessageInfo

func (m *PublicKey) GetType() KeyType {
	if m != nil {
		return m.Type
	}
	return KeyType_Curve25519
}

func (m *PublicKey) GetCreatedAt() *types.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *PublicKey) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublicKey) GetSignatureKey() []byte {
	if m != nil {
		return m.SignatureKey
	}
	return nil
}

func (m *PublicKey) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("echalotte.pb.KeyType", KeyType_name, KeyType_value)
	proto.RegisterType((*PublicKey)(nil), "echalotte.pb.PublicKey")
}

func init() { proto.RegisterFile("pb/pubkey.proto", fileDescriptor_5f12ca58fa90a3e4) }

var fileDescriptor_5f12ca58fa90a3e4 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8e, 0xbd, 0x4e, 0xc3, 0x30,
	0x14, 0x85, 0x63, 0xa8, 0x40, 0xbd, 0x0d, 0x05, 0x59, 0x42, 0x32, 0x15, 0x32, 0x11, 0x2c, 0x81,
	0xc1, 0x11, 0x41, 0x1d, 0x3a, 0x02, 0x63, 0x17, 0x14, 0x75, 0xaf, 0xec, 0xf4, 0x12, 0xa2, 0xa6,
	0xc4, 0x4a, 0x1d, 0x24, 0xbf, 0x05, 0x8f, 0xd5, 0xb1, 0x23, 0x23, 0x4a, 0x5e, 0x04, 0xe1, 0xfe,
	0xc0, 0x66, 0x9f, 0xf3, 0xe9, 0x9e, 0x0f, 0x4e, 0xb5, 0x8a, 0x74, 0xad, 0xe6, 0x68, 0x85, 0xae,
	0x4a, 0x53, 0x52, 0x1f, 0xd3, 0x37, 0x59, 0x94, 0xc6, 0xa0, 0xd0, 0x6a, 0x70, 0x95, 0x95, 0x65,
	0x56, 0x60, 0xe4, 0x3a, 0x55, 0xbf, 0x46, 0x26, 0x5f, 0xe0, 0xd2, 0xc8, 0x85, 0xde, 0xe0, 0xd7,
	0x2b, 0x02, 0xdd, 0x97, 0x5a, 0x15, 0x79, 0x3a, 0x46, 0x4b, 0x6f, 0xa1, 0x63, 0xac, 0x46, 0x46,
	0x02, 0x12, 0xf6, 0xe3, 0x73, 0xf1, 0xff, 0x96, 0x18, 0xa3, 0x9d, 0x58, 0x8d, 0x89, 0x43, 0xe8,
	0x08, 0x20, 0xad, 0x50, 0x1a, 0x9c, 0x4d, 0xa5, 0x61, 0x07, 0x01, 0x09, 0x7b, 0xf1, 0x40, 0x6c,
	0xe6, 0xc4, 0x6e, 0x4e, 0x4c, 0x76, 0x73, 0x49, 0x77, 0x4b, 0x3f, 0x1a, 0x4a, 0xa1, 0x33, 0x93,
	0x46, 0xb2, 0xc3, 0x80, 0x84, 0x7e, 0xe2, 0xde, 0xf4, 0x06, 0x4e, 0x96, 0x79, 0xf6, 0x2e, 0x4d,
	0x5d, 0xe1, 0x74, 0x8e, 0x96, 0x81, 0x2b, 0xfd, 0x7d, 0xf8, 0xab, 0x77, 0x09, 0xdd, 0xfd, 0x9f,
	0xf5, 0x1c, 0xf0, 0x17, 0xdc, 0x5d, 0xc0, 0xf1, 0x56, 0x91, 0xf6, 0x01, 0x9e, 0xeb, 0xea, 0x03,
	0xe3, 0xe1, 0xf0, 0x7e, 0x74, 0xe6, 0x3d, 0xb1, 0x55, 0xc3, 0xc9, 0xba, 0xe1, 0xe4, 0xbb, 0xe1,
	0xe4, 0xb3, 0xe5, 0xde, 0xba, 0xe5, 0xde, 0x57, 0xcb, 0x3d, 0x75, 0xe4, 0x54, 0x1f, 0x7e, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x18, 0x4d, 0x25, 0xc2, 0x48, 0x01, 0x00, 0x00,
}

func (m *PublicKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicKey) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPubkey(dAtA, i, uint64(m.Type))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPubkey(dAtA, i, uint64(m.CreatedAt.Size()))
		n1, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintPubkey(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.SignatureKey) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintPubkey(dAtA, i, uint64(len(m.SignatureKey)))
		i += copy(dAtA[i:], m.SignatureKey)
	}
	if len(m.Signature) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintPubkey(dAtA, i, uint64(len(m.Signature)))
		i += copy(dAtA[i:], m.Signature)
	}
	return i, nil
}

func encodeVarintPubkey(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PublicKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPubkey(uint64(m.Type))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovPubkey(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPubkey(uint64(l))
	}
	l = len(m.SignatureKey)
	if l > 0 {
		n += 1 + l + sovPubkey(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPubkey(uint64(l))
	}
	return n
}

func sovPubkey(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPubkey(x uint64) (n int) {
	return sovPubkey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PublicKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPubkey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (KeyType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPubkey
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &types.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignatureKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignatureKey = append(m.SignatureKey[:0], dAtA[iNdEx:postIndex]...)
			if m.SignatureKey == nil {
				m.SignatureKey = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPubkey
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPubkey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPubkey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPubkey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPubkey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPubkey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPubkey
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPubkey
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPubkey(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPubkey = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPubkey   = fmt.Errorf("proto: integer overflow")
)
